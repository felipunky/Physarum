#version 440 core

//#extension GL_ARB_compute_shader : enable;
//#extension GL_ARB_shader_storage_buffer_object : enable;

layout( rgba32f, binding = 0 ) uniform image2D imgResult;

struct Particle
{

	vec4 Position;
	vec4 Velocity;

};

layout( std430, binding = 1 ) buffer Particles
{

	Particle particles[];

};

layout( local_size_x = 1024, local_size_y = 1, local_size_z = 1 ) in;

uniform vec2 iResolution;
uniform float iTimeDelta;
uniform float iFrame;

const vec4 sphere = vec4( 0., 0., 0., 0.2 );

vec3 bounce( vec3 vin, vec3 n )
{

	return reflect( vin, n );

}

vec3 bounceSphere( vec3 p, vec3 v, vec4 s )
{

	vec3 n = normalize( p - s.xyz );
	return bounce( v, n );

}

bool isInsideSphere( vec3 p, vec4 s )
{

	float r = length( p - s.xyz );
	return ( r < s.w );

}

void main()
{

	ivec2 res = ivec2( iResolution );

	vec2 idVec2 = vec2( gl_GlobalInvocationID.xy );

	vec2 pos = floor( vec2( gl_GlobalInvocationID.x / res.y - 1, gl_GlobalInvocationID.x % res.y - 1 ) );

	// get index in global work group i.e x,y position
	ivec2 uv =  ivec2( pos );
	vec2 coords = pos / iResolution;

	vec4 color = vec4( 0. ); 

	const vec3 gravity = vec3( 0., -9.8, 0. );
	float dt = iTimeDelta * 0.1;//0.001;

	uint gID = gl_GlobalInvocationID.x;

	Particle part = particles[gID];

	vec4 p = part.Position; //Positions[gID];
	vec4 v = part.Velocity; // Velocities[gID];

	vec2 pt = p.xy + v.xy * dt + .5 * dt * dt * gravity.xy * v.w;
	vec2 vt = v.xy + gravity.xy * dt;

	//vec4 den = texture( volumeTex,
	
	/*if( isInsideSphere( pt, sphere ) )
	{
	
		vt = bounceSphere( p.xyz, v.xyz, sphere );
		pt = p.xyz + vt * dt + .5 * dt * dt * gravity * v.w;
		v.w *= .99;
		p.w = 1.;
	
	}*/
	
	if( pt.y < -.9 ) 
	{
	
		vt = reflect( v.xy, vec2( 0., 1 ) );
		pt = p.xy + vt * dt + .5 * dt * dt * gravity.xy * v.w; 
		v.w *= .99;
		p.w = 1.;
	
	}

	if( pt.y > 0.9 ) 
	{
	
		vt = reflect( v.xy, vec2( 0., -1 ) );
		pt = p.xy + vt * dt + .5 * dt * dt * gravity.xy * v.w; 
		v.w *= .99;
		p.w = 1.;
	
	}

	if( pt.x < -0.9 ) 
	{
	
		vt = reflect( v.xy, vec2( 1., 0 ) );
		pt = p.xy + vt * dt + .5 * dt * dt * gravity.xy * v.w; 
		v.w *= .99;
		p.w = 1.;
	
	}

	if( pt.x > 0.9 ) 
	{
	
		vt = reflect( v.xy, vec2( -1., 0 ) );
		pt = p.xy + vt * dt + .5 * dt * dt * gravity.xy * v.w; 
		v.w *= .99;
		p.w = 1.;
	
	}

	vec2 sub = p.xy - pt.xy;

	bvec2 diff = lessThan( abs( sub ), vec2( 1e-2 ) );


	//if( length( normalize( vt ) ) > 0.1 )
	//if( diff.x && diff.y )
	coords = ( -iResolution + 2. * pos ) / iResolution.y;
	//coords.y += 1. * -1.;
	//coords *= vec2( 1., -1. );
	//coords *= 2. - 1.;
	if( coords.y > -.9 || coords.y < 0.9 )//if( coords.y < -.9 &&  coords.y > 0.9 && coords.x < -0.9 && coords.x > 0.9 )
	{
	
		//color.g += 1.;
		//float dist = length( pt * 2. - 1. ) - 0.5;
		//color += smoothstep( 0.01, 0.005, dist );
		//if( distance( pt, coords ) > 0.1 )
		{

			float dist = length( p.xy - coords ) - 1.;
			color += smoothstep( 0.01, 0.005, dist );

			//color += 1.;

		}

	}

	particles[gID] = Particle( vec4( pt, 1., p.w ), vec4( vt, 1., v.w ) );

	imageStore( imgResult, uv, color );

	// base pixel colour for image

	/*ivec2 res = ivec2( iResolution );

	vec2 idVec2 = vec2( gl_GlobalInvocationID.xy );

	vec2 pos = floor( vec2( gl_GlobalInvocationID.x / res.y - 1, gl_GlobalInvocationID.x % res.y - 1 ) );

	// get index in global work group i.e x,y position
	ivec2 uv =  ivec2( pos );
	vec2 coords = pos / iResolution;

	vec4 color = vec4( 0. ); 
	
	if( iFrame == 0 )
	{
	
		float dist = length( coords - 0.5 ) - 0.1;

		color += smoothstep( 0.01, 0.01 - 0.005, dist );
	
	}

	else
	{
	
		for( int y = -1; y <= 1; ++y )
		{
		
			for( int x = -1; x <= 1; ++x )
			{
			
				vec4 sampleT = imageLoad( imgResult, ivec2( uv + vec2( x, y ) ) );

				color += sampleT;
			
			}
		
		}

		color *= 1. / 9.;

	}

	imageStore( imgResult, uv, color );*/

}
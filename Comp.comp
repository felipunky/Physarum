#version 440 core

//#extension GL_ARB_compute_shader : enable;
//#extension GL_ARB_shader_storage_buffer_object : enable;

layout( binding = 0, std140 ) buffer Pos
{

	vec4 Positions[];

};

layout( binding = 1, std140 ) buffer Vel
{

	vec4 Velocities[];

};

//uniform float iTimeDelta;

layout( local_size_x = 1000, local_size_y = 1, local_size_z = 1 ) in;

const vec4 sphere = vec4( 0., 0., 0., 0.2 );

vec3 bounce( vec3 vin, vec3 n )
{

	return reflect( vin, n );

}

vec3 bounceSphere( vec3 p, vec3 v, vec4 s )
{

	vec3 n = normalize( p - s.xyz );
	return bounce( v, n );

}

bool isInsideSphere( vec3 p, vec4 s )
{

	float r = length( p - s.xyz );
	return ( r < s.w );

}

void main()
{

	const vec3 gravity = vec3( 0., -9.8, 0. );
	const float dt = 0.001;

	uint gID = gl_GlobalInvocationID.x;

	vec3 p = Positions[gID].xyz;
	vec3 v = Velocities[gID].xyz;

	vec3 pt = p + v * dt + .5 * dt * dt * gravity;
	vec3 vt = v + gravity * dt;

	if( isInsideSphere( pt, sphere ) )
	{
	
		vt = bounceSphere( p, v, sphere );
		pt = p + vt * dt + .5 * dt * dt * gravity;

		//vt *= 0.;
	
	}

	Positions[gID].xyz = pt;
	Velocities[gID].xyz = vt;

}